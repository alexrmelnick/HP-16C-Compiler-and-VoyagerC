; These programs convert floating point decimal degrees to/from sexagesimal
; Another computer programmer's calculator, the Casio CM-100, had functions for this built-in and we cannot let another calculator upstage our beloved HP-16C. 
; Lets write two programs to implement these functionalities!

;	For review, sexagesimal and decimal degrees are both ways of displaying angles or locations using latitude and longitude
; 	Example: location of the US Capitol
; 	Sexagesimal:		38deg 53' 23" N	, 77deg 00' 32" W
; 	Decimal degrees:	38.8897deg		, -77.0089deg 
;		Note: Negative sexagesimal degrees indicate degrees South and degrees West

; This program could be sped up significantly by using a faster algorithm to truncate the floats.
; Without a remainder or floor function, I simply iteratively subtracted by 1 until I reached a value less than 1.
; This is slow for large numbers, but I can't think of a way to speed it up without doing some witchcraft and switching between float and integer modes.
; It's only O(n) as opposed to the rest of the program which is O(1), but we are running on very old hardware. 
; I challenge someone else to find a more efficient way to do this. 



; Initial settings: floating point mode
; Usage: Store your desired data in the specified registers, then run the relevant program
;		GSB A -> Convert from sexagesimal to decimal degrees 
;		GSB B -> Convert from decimal degrees to sexagesimal
;	Inputs/Outputs:	R0 <- decimal degrees
;					R1 <- degrees
; 					R2 <- minutes
;					R3 <- seconds
; Note that the result for converting from sexagesimal to decimal degrees is displayed as well as saved

; Memory Map
; R0 := decimal degrees input/output
; R1 := degrees input/output
; R2 := minutes input/output
; R3 := seconds input/output
; R4 := input/output for trunc(x,0)

LBL A 	; Convert from sexagesimal to decimal degrees
	; Decimal degrees = degrees + minutes/60 + seconds/3600
	RCL 1 	; X <- R1 := degrees

	RCL 2	; X <- R2 := minutes, Y <- R1 := degrees
	60		; X <- minutes/60
	/
	+		; X <- degrees + minutes/60

	RCL 3	; X <- R2 := seconds; Y <- degrees+minutes/60
	3600	; X <- seconds/3600
	/
	+		; X <- degrees + minutes/60 + seconds/3600

	STO 0	; Save final value to R0
	RTN		; End program

LBL B	; Convert from decimal degrees to sexagesimal
	; degrees = trunc(decimal degrees, 0)
	; minutes = trunc(60*abs(decimal degrees - degrees),0)
	; seconds = 3600*abs(decimal degrees - degrees) - 60*minutes

	; Calculating degrees
	RCL 0	; X <- Decimal degrees
	STO 4	; R4 <- decimal degrees
	GSB 0	; R4 <- trunc(decimal degrees,0)
	RCL 4	; X <- trunc(decimal degrees,0)
	STO 1 	; R1 := degrees <- trunc(decimal degrees,0)

	; Calculating minutes
	; X <- degrees
	RCL 0	; X <- decimal degrees; Y <- degrees
	-		; X <- abs(decimal degrees - degrees) (order doesn't matter because of abs)
	abs
	60
	*		; X <- 60*abs(decimal degrees - degrees)
	STO 4	; R4 <- 60*abs(decimal degrees - degrees)
	GSB 0	; R4 <- trunc(60*abs(decimal degrees - degrees),0)
	RCL 4	; X <- trunc(60*abs(decimal degrees - degrees),0)
	STO 2	; seconds <- trunc(60*abs(decimal degrees - degrees),0)

	; Calculating seconds
	RCL 0	; 3600*abs(decimal degrees - degrees)
	RCL 1
	-
	abs
	3600
	*
	RCL 2 	; 3600*abs(decimal degrees - degrees) - 60*minutes
	60
	*
	-
	STO 3 	; R3 <- seconds
	RTN		; End program

; Algorithm
; This algorithm is needlessly slow, but it's all I could think of without a floor or remainder functions in float mode
;	trunc(x,0)
;		y = x
;		while (y>1)
;			y--
;		return x-y

; R4 is input and output
LBL 0	; Trunc(x,0)
	; Trunc(x,0) = x - x%1
	RCL 4	; X <- R4:=input
	CF 0 	; Clear F0 incase it was already set

	; If input<0, set flag 0
	X<0
		SF 0
	ABS	; Take the absolute value of X
	
	1 		; X <- 1; Y <- input

	LBL 1 	; LOOP TOP
		X>Y		; If 1 > Input, goto LOOP END, else skip next line
			GTO 2
		-		; X <- Input-1
		1   	; X <- 1; Y <- Input-1
		GTO 1 	; Goto LOOP TOP
		
	LBL 2 	; LOOP END

	; Y <- Decimal Part
	Rv	; X <- Decimal Part
	RCL 4	; X <- Input; Y <- Decimal Part
	ABS		; X <- abs(Input); Y <- Decimal Part
	X<>Y	; X <- Decimal Part; Y <- abs(Input)
	-		; X <- trunc(input,0)

	; Set sign if X was originally negative
	F? 0
		CHS

	STO 4	; Store answer back to R4
	RTN
