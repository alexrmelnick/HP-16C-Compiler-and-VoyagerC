; These programs convert floating point decimal degrees to/from sexagesimal
; Another computer programmer's calculator, the Casio CM-100, had functions for this built-in and we cannot let another calculator upstage our beloved HP-16C. 
; Lets write two programs to implement these functionalities!
; Note that this program also comes with subroutines to round and take the int part of a float! 

;	For review, sexagesimal and decimal degrees are both ways of displaying angles or locations using latitude and longitude
; 	Example: location of the US Capitol
; 	Sexagesimal:		38° 53' 23" N	, 77° 00' 32" W
; 	Decimal degrees:	38.8897°		, -77.0089° 
;		Note: Negative sexagesimal degrees indicate degrees South and degrees West
; 	Example: Eiffel Tower
;	Sexagesimal:		48° 51′ 30″ N	, 2° 17′ 40″ E
;	Decimal degrees:	48.858222°		, 2.2945°


; Initial settings: floating point mode
; Usage: Store your desired data in the specified registers, then run the relevant program
;		GSB A -> Convert from sexagesimal to decimal degrees 
;		GSB B -> Convert from decimal degrees to sexagesimal
;	Inputs/Outputs:	R1 <- degrees
; 					R2 <- minutes
;					R3 <- seconds
; Note that decimal degrees are the displayed value

; Memory Map
; R1 := degrees input/output
; R2 := minutes input/output
; R3 := seconds input/output

LBL A 	; Convert from sexagesimal to decimal degrees
	; Decimal degrees = degrees + minutes/60 + seconds/3600
	RCL 1 	; X <- R1 := degrees
	CF 1	; Clear F1 incase it was already set

	GSB 2	; Store sign of X

	RCL 2	; X <- R2 := minutes, Y <- R1 := degrees
	60		; X <- minutes/60
	/
	+		; X <- degrees + minutes/60

	RCL 3	; X <- R2 := seconds; Y <- degrees+minutes/60
	3600	; X <- seconds/3600
	/
	+		; X <- degrees + minutes/60 + seconds/3600

	; Set sign if degrees was originally negative
	F? 2
		CHS

	RTN		; End program

LBL B	; Convert from decimal degrees to sexagesimal
	; degrees = trunc(decimal degrees, 0)
	; minutes = trunc(60*abs(decimal degrees - degrees),0)
	; seconds = 3600*abs(decimal degrees - degrees) - 60*minutes

	; Calculating degrees
	; X is the starting value
	STO I 	; Store decimal degrees for future use
	GSB 0	; R4 <- trunc(decimal degrees,0)
	F? 2
		CHS
	STO 1 	; R1 := degrees <- trunc(decimal degrees,0)

	; Calculating minutes
	; X <- degrees
	RCL I	; X <- decimal degrees; Y <- degrees
	-		; X <- abs(decimal degrees - degrees) (order doesn't matter because of abs)
	abs
	60
	*		; X <- 60*abs(decimal degrees - degrees)
	GSB 0	; R4 <- trunc(60*abs(decimal degrees - degrees),0)
	STO 2	; seconds <- trunc(60*abs(decimal degrees - degrees),0)

	; Calculating seconds
	RCL I	; 3600*abs(decimal degrees - degrees)
	RCL 1
	-
	abs
	3600
	*
	RCL 2 	; 3600*abs(decimal degrees - degrees) - 60*minutes
	60
	*
	-
	STO 3 	; R3 <- seconds

	RCL 1	; Recall degrees for display
	RTN		; End program

LBL 0   ; INT part of float
    GSB 2
	ENTER
	ENTER	
    GSB 3
    x>y     ; Adjust rounded result by 1
    	1
	0	
    Enter	
    10	
    /	
    -
    RTN	

LBL 2   ; Subroutine to store sign
    CF 2	
    x<0	
        SF 2	
    ABS	
    RTN	

LBL 3	; Subroutine to round
    EEX	
    9	
    +	
    LSTx	
    -	
    RTN	